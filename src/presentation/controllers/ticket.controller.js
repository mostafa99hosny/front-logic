const path = require("path");
const fs = require("fs");
const Ticket = require('../../infrastructure/models/ticket.model');

// Create a new ticket
const createTicket = async (req, res) => {
  try {
    const { subject, classification, description } = req.body;

    // Handle file attachments if any
    let attachments = [];
    if (req.files && req.files.length > 0) {
      attachments = req.files.map(file => ({
        filename: file.filename,        // unique filename generated by multer
        originalName: file.originalname, // keep original name for display
        path: file.path,
        mimetype: file.mimetype,
        size: file.size
      }));
    }

    const newTicket = new Ticket({
      subject,
      classification,
      description,
      attachments,
      createdBy: req.user.userId // Link ticket to user
    });

    const savedTicket = await newTicket.save();

    res.status(201).json({
      success: true,
      message: 'Ticket created successfully',
      ticket: savedTicket
    });
  } catch (error) {
    console.error('Error creating ticket:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create ticket',
      error: error.message
    });
  }
};

// Get all tickets
const getAllTickets = async (req, res) => {
  try {
    let tickets;
    const adminEmail = "admin.tickets@gmail.com";
    if (req.user.email === adminEmail) {
      tickets = await Ticket.find().sort({ createdAt: -1 });
    } else {
      tickets = await Ticket.find({ createdBy: req.user.userId }).sort({ createdAt: -1 });
    }
    res.status(200).json({
      success: true,
      tickets
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to fetch tickets',
      error: error.message
    });
  }
};

// Get single ticket by ID
const getTicketById = async (req, res) => {
  try {
    const ticket = await Ticket.findById(req.params.id);

    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: 'Ticket not found'
      });
    }

    res.status(200).json({
      success: true,
      ticket
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to fetch ticket',
      error: error.message
    });
  }
};

// Download ticket attachment
const downloadAttachment = async (req, res) => {
  try {
    const { ticketId, filename } = req.params;

    const ticket = await Ticket.findById(ticketId);
    if (!ticket) {
      return res.status(404).json({ success: false, message: "Ticket not found" });
    }

    const file = ticket.attachments.find(att => att.filename === filename);
    if (!file) {
      return res.status(404).json({ success: false, message: "File not found in ticket" });
    }

    const filePath = path.resolve(file.path);
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ success: false, message: "File not found on server" });
    }

    res.download(filePath, file.originalName || file.filename);
  } catch (error) {
    console.error("Error downloading file:", error);
    res.status(500).json({ success: false, message: "Failed to download file" });
  }
};

module.exports = {
  createTicket,
  getAllTickets,
  getTicketById,
  downloadAttachment
};
